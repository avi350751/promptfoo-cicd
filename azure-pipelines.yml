# Promptfoo evaluation pipeline

trigger:
- main

pool:
  vmImage: ubuntu-latest


variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install Node.js'

  - script: |
      npm ci
      npm install -g promptfoo
    displayName: 'Install dependencies'

  - script: |
      set -e
      mkdir -p "$(Build.ArtifactStagingDirectory)/promptfoo-results"

      # Run the evaluation
      npx -y promptfoo@latest eval \
        -config promptfooconfig.yaml \
        --output results.json \
        --prompts prompts/prompt.txt \
        --no-cache

      # Export the results to JUnit XML format
      npx -y promptfoo@latest export \
        -config promptfooconfig.yaml \
        --format junit \
        --input results.json \
        --output "$(Build.ArtifactStagingDirectory)/promptfoo-results/promptfoo-results.xml"

      # Optional: HTML report
      npx -y promptfoo@latest eval \
        -c promptfooconfig.yaml \
        --output "$(Build.ArtifactStagingDirectory)/promptfoo-results/index.html" \
        --prompts prompts/prompt.txt
    displayName: 'Run promptfoo evaluations'
    env:
      OPENAI_API_KEY: $(OPENAI_API_KEY)
      # Add other API keys if needed

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Build.ArtifactStagingDirectory)/promptfoo-results/promptfoo-results.xml'
      mergeTestResults: true
      testRunTitle: 'Promptfoo Evaluation Results'
    condition: succeededOrFailed()
    displayName: 'Publish test results'

  - task: PublishBuildArtifacts@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/promptfoo-results'
      artifactName: 'promptfoo-results'
    condition: succeededOrFailed()
    displayName: 'Publish evaluation results'
